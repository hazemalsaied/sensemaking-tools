// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// G√©n√®re des id√©es abstraites pour chaque th√®me √† partir de commentaires cat√©goris√©s.
//
// Le fichier CSV d'entr√©e doit contenir les champs "comment_text", "comment-id" et "topics".
// Le fichier CSV de sortie contiendra tous les champs d'entr√©e plus un nouveau champ "ideas" 
// qui contient les id√©es associ√©es √† chaque commentaire.
//
// Le processus se d√©roule en 3 phases:
// 1. G√©n√©ration d'id√©es abstraites √† partir des commentaires du th√®me
// 2. Cat√©gorisation des commentaires par lots selon les id√©es g√©n√©r√©es
// 3. Filtrage des id√©es peu repr√©sentatives (moins de X propositions)
//
// Exemple d'utilisation:
// npx ts-node make-cli/ideas.ts \
//    --inputFile ~/input.csv \
//    --minComments 10 \
//    --minProposals 3

import { VertexModel } from "../src/models/vertex_model";
import { OpenAIModel } from "../src/models/openai_model";
import { Sensemaker } from "../src/sensemaker";
import { Comment, Topic } from "../src/types";
import { Command } from "commander";
import { parse } from "csv-parse";
import { createObjectCsvWriter } from "csv-writer";
import * as fs from "fs";
import * as path from "path";
import { generateIdeasForTopic, categorizeCommentsByIdeas } from "../src/tasks/idea_analysis";
import * as config from "../configs.json";
import { CommentCsvRow } from "./analyzation_utils";

interface IdeaCsvRow extends CommentCsvRow {
    ideas?: string;
}

interface TopicWithComments {
    topicName: string;
    comments: Comment[];
}

async function main(): Promise<void> {
    // Parse command line arguments.
    const program = new Command();
    program
        .option("-i, --inputFile <file>", "Le fichier CSV d'entr√©e contenant les commentaires cat√©goris√©s.")
        .option("--minComments <number>", "Nombre minimum de commentaires par th√®me pour g√©n√©rer des id√©es", "10")
        .option("--maxIdeas <number>", "Nombre maximum d'id√©es √† g√©n√©rer par th√®me", "5")
        .option("--minProposals <number>", "Nombre minimum de propositions par id√©e pour la conserver", "7");
    program.parse(process.argv);
    const options = program.opts();

    if (!options.inputFile) {
        throw new Error("Le fichier d'entr√©e est requis (--inputFile)");
    }

  
    console.log(`üìÑ Lecture du fichier CSV: ${options.inputFile}`);
    const csvRows = await readCsv(options.inputFile);
    console.log(`‚úÖ ${csvRows.length} commentaires charg√©s`);

    // Convertir les lignes CSV en commentaires
    const comments = convertCsvRowsToComments(csvRows);
    console.log(`üìä ${comments.length} commentaires convertis`);

    // Grouper les commentaires par th√®me
    const topicsWithComments = groupCommentsByTopic(comments);
    console.log(`üîç ${topicsWithComments.length} th√®mes trouv√©s`);

    // Filtrer les th√®mes avec suffisamment de commentaires
    const minComments = parseInt(options.minComments);
    const validTopics = topicsWithComments.filter(
        topic => topic.comments.length >= minComments
    );
    console.log(`‚úÖ ${validTopics.length} th√®mes avec au moins ${minComments} commentaires`);

    if (validTopics.length === 0) {
        console.log("‚ö†Ô∏è Aucun th√®me ne contient suffisamment de commentaires pour g√©n√©rer des id√©es");
        return;
    }

    // Initialiser le mod√®le
    let defaultModel;
    let generationProvider;

    if (config.provider === "openai") {
        defaultModel = new OpenAIModel(
            config.openai.api_key,
            config.openai.model,
            config.openai.max_tokens,
            config.openai.temperature,
            config.openai.parallelism
        );
        generationProvider = "OpenAI";
    } else if (config.provider === "vertex") {
        defaultModel = new VertexModel(
            config.gcloud.project_id,
            config.gcloud.location,
            config.gcloud.categorization_model
        );
        generationProvider = "VertexAI";
    } else {
        throw new Error(`Provider non support√©: ${config.provider}. Valeurs support√©es: 'openai', 'vertex'`);
    }

    const sensemaker = new Sensemaker({
        defaultModel: defaultModel,
    });
    console.log(`ü§ñ Provider de g√©n√©ration: ${generationProvider}`);

    // G√©n√©rer les id√©es pour chaque th√®me (Phase 1 + Phase 2)
    const maxIdeas = parseInt(options.maxIdeas);
    const minProposals = parseInt(options.minProposals);
    const commentsWithIdeas = new Map<string, string[]>();

    for (let i = 0; i < validTopics.length; i++) {
        const topic = validTopics[i];
        console.log(`\nüí° Phase 1: G√©n√©ration d'id√©es pour le th√®me ${i + 1}/${validTopics.length}: ${topic.topicName}`);
        console.log(`üìù ${topic.comments.length} commentaires √† analyser`);

        try {
            // Phase 1: G√©n√©rer les id√©es abstraites
            const ideas = await generateIdeasForTopic(
                topic.comments,
                topic.topicName,
                sensemaker,
                maxIdeas
            );

            console.log(`‚úÖ ${ideas.length} id√©es g√©n√©r√©es: ${ideas.join(', ')}`);

            if (ideas.length > 0) {
                // Phase 2: Cat√©goriser les commentaires par lots selon les id√©es
                console.log(`\nüîÑ Phase 2: Cat√©gorisation des commentaires selon les id√©es...`);
                const commentCategorizations = await categorizeCommentsByIdeas(
                    topic.comments,
                    ideas,
                    topic.topicName,
                    sensemaker
                );

                // Phase 3: Filtrer les id√©es peu repr√©sentatives
                console.log(`\nüîç Phase 3: Filtrage des id√©es avec moins de ${minProposals} propositions...`);
                const filteredIdeas = filterIdeasByProposalCount(commentCategorizations, ideas, minProposals);

                if (filteredIdeas.length < ideas.length) {
                    console.log(`üóëÔ∏è ${ideas.length - filteredIdeas.length} id√©es supprim√©es (trop peu de propositions)`);
                    console.log(`‚úÖ ${filteredIdeas.length} id√©es conserv√©es: ${filteredIdeas.join(', ')}`);
                }

                // Associer les id√©es filtr√©es aux commentaires
                for (const comment of topic.comments) {
                    const commentIdeas = commentCategorizations[comment.id] || [];
                    const filteredCommentIdeas = commentIdeas.filter(idea => filteredIdeas.includes(idea));

                    if (filteredCommentIdeas.length > 0) {
                        if (!commentsWithIdeas.has(comment.id)) {
                            commentsWithIdeas.set(comment.id, []);
                        }
                        commentsWithIdeas.get(comment.id)!.push(...filteredCommentIdeas);
                    }
                }

                console.log(`‚úÖ Traitement termin√© pour ${topic.topicName}`);
            }
        } catch (error) {
            console.error(`‚ùå Erreur lors de la g√©n√©ration d'id√©es pour ${topic.topicName}:`, error);
        }
    }

    // Cr√©er les lignes CSV avec les id√©es
    const csvRowsWithIdeas = addIdeasToCsvRows(csvRows, commentsWithIdeas);

    // √âcrire le fichier de sortie
    let outputFile = options.inputFile.replace(".csv", "_with_ideas.csv");
    await writeCsv(csvRowsWithIdeas, outputFile);
    console.log(`\nüéâ Fichier CSV g√©n√©r√© avec succ√®s: ${outputFile}`);
}

async function readCsv(inputFilePath: string): Promise<CommentCsvRow[]> {
    if (!inputFilePath) {
        throw new Error("Le chemin du fichier d'entr√©e est manquant!");
    }
    const filePath = path.resolve(inputFilePath);
    const fileContent = fs.readFileSync(filePath, { encoding: "utf-8" });

    const parser = parse(fileContent, {
        delimiter: ",",
        columns: true,
    });

    return new Promise((resolve, reject) => {
        const allRows: CommentCsvRow[] = [];
        fs.createReadStream(filePath)
            .pipe(parser)
            .on("error", (error) => reject(error))
            .on("data", (row: CommentCsvRow) => {
                allRows.push(row);
            })
            .on("end", () => {
                resolve(allRows);
            });
    });
}

function convertCsvRowsToComments(csvRows: CommentCsvRow[]): Comment[] {
    const comments: Comment[] = [];
    for (const row of csvRows) {
        const comment: Comment = {
            text: row["comment_text"],
            id: row["comment-id"],
        };

        // Parser les topics si pr√©sents
        if (row.topics && row.topics.trim()) {
            try {
                comment.topics = parseTopicsString(row.topics);
            } catch (error) {
                console.warn(`√âchec du parsing des topics pour le commentaire ${row["comment-id"]}: ${error}`);
            }
        }

        comments.push(comment);
    }
    return comments;
}

function parseTopicsString(topicsString: string): Topic[] {
    // Format attendu: "Transportation:PublicTransit;Transportation:Parking;Technology:Internet"
    const topicPairs = topicsString.split(';');
    const topics: Topic[] = [];

    for (const pair of topicPairs) {
        if (pair.trim()) {
            const [topicName, subtopicName] = pair.split(':');
            if (topicName && subtopicName) {
                // Chercher si le topic existe d√©j√†
                let existingTopic = topics.find(t => t.name === topicName);
                if (!existingTopic) {
                    existingTopic = { name: topicName, subtopics: [] };
                    topics.push(existingTopic);
                }

                // Ajouter le subtopic
                if ("subtopics" in existingTopic) {
                    existingTopic.subtopics.push({ name: subtopicName });
                }
            }
        }
    }

    return topics;
}

function groupCommentsByTopic(comments: Comment[]): TopicWithComments[] {
    const topicMap = new Map<string, TopicWithComments>();

    for (const comment of comments) {
        if (!comment.topics) continue;

        for (const topic of comment.topics) {
            const key = topic.name;

            if (!topicMap.has(key)) {
                topicMap.set(key, {
                    topicName: topic.name,
                    comments: []
                });
            }

            topicMap.get(key)!.comments.push(comment);
        }
    }

    return Array.from(topicMap.values());
}

/**
 * Filtre les id√©es qui sont associ√©es √† moins de minProposals propositions
 * @param commentCategorizations Les cat√©gorisations des commentaires
 * @param ideas Les id√©es √† filtrer
 * @param minProposals Le nombre minimum de propositions par id√©e
 * @returns Les id√©es qui respectent le seuil minimum
 */
function filterIdeasByProposalCount(
    commentCategorizations: { [commentId: string]: string[] },
    ideas: string[],
    minProposals: number
): string[] {
    // Compter le nombre de propositions par id√©e
    const ideaCounts: { [idea: string]: number } = {};

    for (const idea of ideas) {
        ideaCounts[idea] = 0;
    }

    for (const commentId in commentCategorizations) {
        const commentIdeas = commentCategorizations[commentId];
        for (const idea of commentIdeas) {
            if (ideaCounts.hasOwnProperty(idea)) {
                ideaCounts[idea]++;
            }
        }
    }

    // Filtrer les id√©es qui respectent le seuil minimum
    const filteredIdeas = ideas.filter(idea => ideaCounts[idea] >= minProposals);

    // Afficher les statistiques de filtrage
    console.log(`üìä Statistiques de filtrage:`);
    for (const idea of ideas) {
        const count = ideaCounts[idea];
        const status = count >= minProposals ? '‚úÖ' : '‚ùå';
        console.log(`  ${status} "${idea}": ${count} propositions`);
    }

    return filteredIdeas;
}

function addIdeasToCsvRows(csvRows: CommentCsvRow[], commentsWithIdeas: Map<string, string[]>): IdeaCsvRow[] {
    return csvRows.map(row => {
        const ideas = commentsWithIdeas.get(row["comment-id"]) || [];
        return {
            ...row,
            ideas: ideas.join('; ')
        };
    });
}

async function writeCsv(csvRows: IdeaCsvRow[], outputFile: string) {
    // Cr√©er les en-t√™tes
    const header: { id: string; title: string }[] = [];
    for (const column of Object.keys(csvRows[0])) {
        header.push({ id: column, title: column });
    }

    const csvWriter = createObjectCsvWriter({
        path: outputFile,
        header: header,
    });

    csvWriter
        .writeRecords(csvRows)
        .then(() => console.log(`Fichier CSV √©crit avec succ√®s: ${outputFile}`));
}

main().catch(console.error);
